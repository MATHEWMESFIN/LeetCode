/*
 * 74. Search a 2D Matrix -
 * 
 * You are given an m x n integer matrix matrix with the following two properties:
    * Each row is sorted in non-decreasing order.
    * The first integer of each row is greater than the last integer of the previous row.

 * Given an integer target, return true if target is in matrix or false otherwise.
 * You must write a solution in O(log(m * n)) time complexity.
 */

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        int i = matrix.length - 1;
        int prev = -1;
        int top = 0;
        int bottom = matrix.length - 1;
        while((target > matrix[i][matrix[i].length - 1]) || (target < matrix[i][0])) {

            if(prev == i) {
                System.out.println("i = " + i);
                return false;
            }

            if(target < matrix[i][0]) {
                bottom = i;
            } else if(target > matrix[i][matrix[i].length - 1]) {
                top = i;
            }

            prev = i;
            i = (top + bottom)/2;
        }

        int j = matrix[i].length - 1;
        prev = -1;
        int start = 0;
        int end = matrix[i].length - 1;
        while(target != matrix[i][j]) {
            System.out.println("j = " + j);
            

            if(prev == j) {
                return false;
            }

            if(target < matrix[i][j]) {
                end = j;
            } else if(target > matrix[i][j]) {
                start = j;
            }

            prev = j;
            j = (start + end)/2;
        }

        return true;
    }
}