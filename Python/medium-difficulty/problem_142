# 142. Linked List Cycle II -

# Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

# There is a cycle in a linked list if there is some node in the list that can be reached again 
# by continuously following the next pointer. Internally, pos is used to denote the index of the
# node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. 
# Note that pos is not passed as a parameter.

# Do not modify the linked list.

class Solution(object):
    def detectCycle(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        thisList = []

        while head != None:
            if (thisList.count(head) != 0):
                return head
            thisList.append(head)
            head = head.next
        
        return head